/* tslint:disable */
/* eslint-disable */
/**
 * qwen-code-api-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime.ts";
import {
  type InlineObject,
  InlineObjectToJSON,
  type InlineResponse200,
  InlineResponse200FromJSON,
} from "../models/index.ts";

export interface CommandMcpPostRequest {
  inlineObject?: InlineObject;
}

export interface CommandMcpPost0Request {
  inlineObject?: InlineObject;
}

/**
 * CommandApi - interface
 *
 * @export
 * @interface CommandApiInterface
 */
export interface CommandApiInterface {
  /**
   * 调用mcp命令获取MCP服务器列表
   * @summary /command/mcp
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApiInterface
   */
  commandMcpPostRaw(
    requestParameters: CommandMcpPostRequest
  ): Promise<runtime.ApiResponse<InlineResponse200>>;

  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  commandMcpPost(
    requestParameters: CommandMcpPostRequest
  ): Promise<InlineResponse200>;

  /**
   * 调用mcp命令获取MCP服务器列表
   * @summary /command/mcp
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CommandApiInterface
   */
  commandMcpPost_1Raw(
    requestParameters: CommandMcpPost0Request
  ): Promise<runtime.ApiResponse<InlineResponse200>>;

  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  commandMcpPost_1(
    requestParameters: CommandMcpPost0Request
  ): Promise<InlineResponse200>;
}

/**
 *
 */
export class CommandApi extends runtime.BaseAPI implements CommandApiInterface {
  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  async commandMcpPostRaw(
    requestParameters: CommandMcpPostRequest
  ): Promise<runtime.ApiResponse<InlineResponse200>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/command/mcp`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON(requestParameters.inlineObject),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse200FromJSON(jsonValue)
    );
  }

  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  async commandMcpPost(
    requestParameters: CommandMcpPostRequest
  ): Promise<InlineResponse200> {
    const response = await this.commandMcpPostRaw(requestParameters);
    return await response.value();
  }
  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  async commandMcpPost_1Raw(
    requestParameters: CommandMcpPost0Request
  ): Promise<runtime.ApiResponse<InlineResponse200>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/command/mcp`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON(requestParameters.inlineObject),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse200FromJSON(jsonValue)
    );
  }

  /**
   * 调用mcp命令获取MCP服务器列表
   * /command/mcp
   */
  async commandMcpPost_1(
    requestParameters: CommandMcpPost0Request
  ): Promise<InlineResponse200> {
    const response = await this.commandMcpPost_1Raw(requestParameters);
    return await response.value();
  }
  async commandToolsPost(
    requestParameters: CommandToolsPostRequest
  ): Promise<InlineResponse2> {
    const response = await this.commandToolsPostRaw(requestParameters);
    return await response.value();
  }
  async commandToolsPostRaw(requestParameters: CommandToolsPostRequest) {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/command/tools`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObjectToJSON2(requestParameters.inlineObject),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2FromJSON(jsonValue)
    );
  }
}
export interface CommandToolsPostRequest {
  inlineObject: inlineObject2;
}
export interface inlineObject2 {
  sessionId: string;
  args: string;
}
export function InlineObjectToJSON2(value?: inlineObject2 | null): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    sessionId: value.sessionId,
    args: value.args,
  };
}
export interface InlineResponse2 {
  success: boolean;
  error?: string;
  baseTimestamp: number;
  itemData: {
    type: string;

    text: string;
  };
}
export function InlineResponse2FromJSON(json: any): InlineResponse2 {
  return InlineResponse2FromJSONTyped(json, false);
}

export function InlineResponse2FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): InlineResponse2 {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    error: json["error"],
    success: json["success"],
    baseTimestamp: json["baseTimestamp"],
    itemData: {
      type: json["itemData"]["type"],
      text: json["itemData"]["text"],
    },
  };
}
