/* tslint:disable */
/* eslint-disable */
/**
 * qwen-code-api-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
  type InlineObject1,
  InlineObject1ToJSON,
  type InlineObject2,
  InlineObject2ToJSON,
  type InlineResponse2001,
  InlineResponse2001FromJSON,
  type InlineResponse2002,
  InlineResponse2002FromJSON,
} from "../models/index.ts";
import * as runtime from "../runtime.ts";

export interface SessionsCreatePostRequest {
  inlineObject1?: InlineObject1;
}

export interface SessionsCreatePost0Request {
  inlineObject1?: InlineObject1;
}

export interface SessionsCwdPostRequest {
  inlineObject2?: InlineObject2;
}

export interface SessionsCwdPost0Request {
  inlineObject2?: InlineObject2;
}

/**
 * SessionsApi - interface
 *
 * @export
 * @interface SessionsApiInterface
 */
export interface SessionsApiInterface {
  /**
   * 创建新的会话
   * @summary /sessions/create
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApiInterface
   */
  sessionsCreatePostRaw(
    requestParameters: SessionsCreatePostRequest
  ): Promise<runtime.ApiResponse<InlineResponse2001>>;

  /**
   * 创建新的会话
   * /sessions/create
   */
  sessionsCreatePost(
    requestParameters: SessionsCreatePostRequest
  ): Promise<InlineResponse2001>;

  /**
   * 创建新的会话
   * @summary /sessions/create
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApiInterface
   */
  sessionsCreatePost_1Raw(
    requestParameters: SessionsCreatePost0Request
  ): Promise<runtime.ApiResponse<InlineResponse2001>>;

  /**
   * 创建新的会话
   * /sessions/create
   */
  sessionsCreatePost_1(
    requestParameters: SessionsCreatePost0Request
  ): Promise<InlineResponse2001>;

  /**
   * 根据工作目录路径查找会话
   * @summary /sessions/cwd
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApiInterface
   */
  sessionsCwdPostRaw(
    requestParameters: SessionsCwdPostRequest
  ): Promise<runtime.ApiResponse<InlineResponse2002>>;

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  sessionsCwdPost(
    requestParameters: SessionsCwdPostRequest
  ): Promise<InlineResponse2002>;

  /**
   * 根据工作目录路径查找会话
   * @summary /sessions/cwd
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof SessionsApiInterface
   */
  sessionsCwdPost_2Raw(
    requestParameters: SessionsCwdPost0Request
  ): Promise<runtime.ApiResponse<InlineResponse2002>>;

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  sessionsCwdPost_2(
    requestParameters: SessionsCwdPost0Request
  ): Promise<InlineResponse2002>;
}

/**
 *
 */
export class SessionsApi
  extends runtime.BaseAPI
  implements SessionsApiInterface
{
  /**
   * 创建新的会话
   * /sessions/create
   */
  async sessionsCreatePostRaw(
    requestParameters: SessionsCreatePostRequest
  ): Promise<runtime.ApiResponse<InlineResponse2001>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/sessions/create`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject1ToJSON(requestParameters.inlineObject1),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2001FromJSON(jsonValue)
    );
  }

  /**
   * 创建新的会话
   * /sessions/create
   */
  async sessionsCreatePost(
    requestParameters: SessionsCreatePostRequest
  ): Promise<InlineResponse2001> {
    const response = await this.sessionsCreatePostRaw(requestParameters);
    return await response.value();
  }

  /**
   * 创建新的会话
   * /sessions/create
   */
  async sessionsCreatePost_1Raw(
    requestParameters: SessionsCreatePost0Request
  ): Promise<runtime.ApiResponse<InlineResponse2001>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/sessions/create`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject1ToJSON(requestParameters.inlineObject1),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2001FromJSON(jsonValue)
    );
  }

  /**
   * 创建新的会话
   * /sessions/create
   */
  async sessionsCreatePost_1(
    requestParameters: SessionsCreatePost0Request
  ): Promise<InlineResponse2001> {
    const response = await this.sessionsCreatePost_1Raw(requestParameters);
    return await response.value();
  }

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  async sessionsCwdPostRaw(
    requestParameters: SessionsCwdPostRequest
  ): Promise<runtime.ApiResponse<InlineResponse2002>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/sessions/cwd`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject2ToJSON(requestParameters.inlineObject2),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2002FromJSON(jsonValue)
    );
  }

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  async sessionsCwdPost(
    requestParameters: SessionsCwdPostRequest
  ): Promise<InlineResponse2002> {
    const response = await this.sessionsCwdPostRaw(requestParameters);
    return await response.value();
  }

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  async sessionsCwdPost_2Raw(
    requestParameters: SessionsCwdPost0Request
  ): Promise<runtime.ApiResponse<InlineResponse2002>> {
    const queryParameters: runtime.HTTPQuery = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters["Content-Type"] = "application/json";

    const response = await this.request({
      path: `/sessions/cwd`,
      method: "POST",
      headers: headerParameters,
      query: queryParameters,
      body: InlineObject2ToJSON(requestParameters.inlineObject2),
    });

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      InlineResponse2002FromJSON(jsonValue)
    );
  }

  /**
   * 根据工作目录路径查找会话
   * /sessions/cwd
   */
  async sessionsCwdPost_2(
    requestParameters: SessionsCwdPost0Request
  ): Promise<InlineResponse2002> {
    const response = await this.sessionsCwdPost_2Raw(requestParameters);
    return await response.value();
  }
}
