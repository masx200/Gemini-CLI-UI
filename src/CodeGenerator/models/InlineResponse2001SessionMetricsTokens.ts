/* tslint:disable */
/* eslint-disable */
/**
 * qwen-code-api-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface InlineResponse2001SessionMetricsTokens
 */
export interface InlineResponse2001SessionMetricsTokens {
  /**
   * 提示词token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  prompt: number;
  /**
   * 候选响应token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  candidates: number;
  /**
   * 总token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  total: number;
  /**
   * 缓存token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  cached: number;
  /**
   * 思考过程token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  thoughts: number;
  /**
   * 工具调用token数量
   * @type {number}
   * @memberof InlineResponse2001SessionMetricsTokens
   */
  tool: number;
}

export function InlineResponse2001SessionMetricsTokensFromJSON(
  json: any
): InlineResponse2001SessionMetricsTokens {
  return InlineResponse2001SessionMetricsTokensFromJSONTyped(json, false);
}

export function InlineResponse2001SessionMetricsTokensFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): InlineResponse2001SessionMetricsTokens {
  if (json === undefined || json === null) {
    return json;
  }
  return {
    prompt: json["prompt"],
    candidates: json["candidates"],
    total: json["total"],
    cached: json["cached"],
    thoughts: json["thoughts"],
    tool: json["tool"],
  };
}

export function InlineResponse2001SessionMetricsTokensToJSON(
  value?: InlineResponse2001SessionMetricsTokens | null
): any {
  if (value === undefined) {
    return undefined;
  }
  if (value === null) {
    return null;
  }
  return {
    prompt: value.prompt,
    candidates: value.candidates,
    total: value.total,
    cached: value.cached,
    thoughts: value.thoughts,
    tool: value.tool,
  };
}
