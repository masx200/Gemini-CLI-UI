import { test } from "vitest";
import { parseToolsContent } from "./parseToolsContent.ts";
test("parsetoolscontents", () => {
  const testcontent =
    "Available Qwen Code tools:\n\n  - [36mEdit (replace)[0m:\n      [32mReplaces text within a file. By default, replaces a single occurrence, but can replace multiple occurrences when `expected_replacements` is specified. This tool requires providing significant context around the change to ensure precise targeting. Always use the read_file tool to examine the file's current content before attempting a text replacement.[0m\n      [32m[0m\n      [32m      The user has the ability to modify the `new_string` content. If modified, this will be stated in the response.[0m\n      [32m[0m\n      [32mExpectation for required parameters:[0m\n      [32m1. `file_path` MUST be an absolute path; otherwise an error will be thrown.[0m\n      [32m2. `old_string` MUST be the exact literal text to replace (including all whitespace, indentation, newlines, and surrounding code etc.).[0m\n      [32m3. `new_string` MUST be the exact literal text to replace `old_string` with (also including all whitespace, indentation, newlines, and surrounding code etc.). Ensure the resulting code is correct and idiomatic.[0m\n      [32m4. NEVER escape `old_string` or `new_string`, that would break the exact literal text requirement.[0m\n      [32m**Important:** If ANY of the above are not satisfied, the tool will fail. CRITICAL for `old_string`: Must uniquely identify the single instance to change. Include at least 3 lines of context BEFORE and AFTER the target text, matching whitespace and indentation precisely. If this string matches multiple locations, or does not match exactly, the tool will fail.[0m\n      [32m**Multiple replacements:** Set `expected_replacements` to the number of occurrences you want to replace. The tool will replace ALL occurrences that match `old_string` exactly. Ensure the number of replacements matches your expectation.[0m\n  - [36mFindFiles (glob)[0m:\n      [32mEfficiently finds files matching specific glob patterns (e.g., `src/**/*.ts`, `**/*.md`), returning absolute paths sorted by modification time (newest first). Ideal for quickly locating files based on their name or path structure, especially in large codebases.[0m\n  - [36mReadFile (read_file)[0m:\n      [32mReads and returns the content of a specified file from the local filesystem. Handles text, images (PNG, JPG, GIF, WEBP, SVG, BMP), and PDF files. For text files, it can read specific line ranges.[0m\n  - [36mReadFolder (list_directory)[0m:\n      [32mLists the names of files and subdirectories directly within a specified directory path. Can optionally ignore entries matching provided glob patterns.[0m\n  - [36mReadManyFiles (read_many_files)[0m:\n      [32mReads content from multiple files specified by paths or glob patterns within a configured target directory. For text files, it concatenates their content into a single string. It is primarily designed for text-based files. However, it can also process image (e.g., .png, .jpg) and PDF (.pdf) files if their file names or extensions are explicitly included in the 'paths' argument. For these explicitly requested non-text files, their data is read and included in a format suitable for model consumption (e.g., base64 encoded).[0m\n      [32m[0m\n      [32mThis tool is useful when you need to understand or analyze a collection of files, such as:[0m\n      [32m- Getting an overview of a codebase or parts of it (e.g., all TypeScript files in the 'src' directory).[0m\n      [32m- Finding where specific functionality is implemented if the user asks broad questions about code.[0m\n      [32m- Reviewing documentation files (e.g., all Markdown files in the 'docs' directory).[0m\n      [32m- Gathering context from multiple configuration files.[0m\n      [32m- When the user asks to \"read all files in X directory\" or \"show me the content of all Y files\".[0m\n      [32m[0m\n      [32mUse this tool when the user's query implies needing the content of several files simultaneously for context, analysis, or summarization. For text files, it uses default UTF-8 encoding and a '--- {filePath} ---' separator between file contents. Ensure paths are relative to the target directory. Glob patterns like 'src/**/*.js' are supported. Avoid using for single files if a more specific single-file reading tool is available, unless the user specifically requests to process a list containing just one file via this tool. Other binary files (not explicitly requested as image/PDF) are generally skipped. Default excludes apply to common non-text files (except for explicitly requested images/PDFs) and large dependency directories unless 'useDefaultExcludes' is false.[0m\n  - [36mSave Memory (save_memory)[0m:\n      [32mSaves a specific piece of information or fact to your long-term memory.[0m\n      [32m[0m\n      [32mUse this tool:[0m\n      [32m[0m\n      [32m- When the user explicitly asks you to remember something (e.g., \"Remember that I like pineapple on pizza\", \"Please save this: my cat's name is Whiskers\").[0m\n      [32m- When the user states a clear, concise fact about themselves, their preferences, or their environment that seems important for you to retain for future interactions to provide a more personalized and effective assistance.[0m\n      [32m[0m\n      [32mDo NOT use this tool:[0m\n      [32m[0m\n      [32m- To remember conversational context that is only relevant for the current session.[0m\n      [32m- To save long, complex, or rambling pieces of text. The fact should be relatively short and to the point.[0m\n      [32m- If you are unsure whether the information is a fact worth remembering long-term. If in doubt, you can ask the user, \"Should I remember that for you?\"[0m\n      [32m[0m\n      [32m## Parameters[0m\n      [32m[0m\n      [32m- `fact` (string, required): The specific fact or piece of information to remember. This should be a clear, self-contained statement. For example, if the user says \"My favorite color is blue\", the fact would be \"My favorite color is blue\".[0m\n  - [36mSearchText (search_file_content)[0m:\n      [32mSearches for a regular expression pattern within the content of files in a specified directory (or current working directory). Can filter files by a glob pattern. Returns the lines containing matches, along with their file paths and line numbers.[0m\n  - [36mShell (run_shell_command)[0m:\n      [32mThis tool executes a given shell command as `bash -c <command>`. Command can start background processes using `&`. Command is executed as a subprocess that leads its own process group. Command process group can be terminated as `kill -- -PGID` or signaled as `kill -s SIGNAL -- -PGID`.[0m\n      [32m[0m\n      [32m      The following information is returned:[0m\n      [32m[0m\n      [32m      Command: Executed command.[0m\n      [32m      Directory: Directory (relative to project root) where command was executed, or `(root)`.[0m\n      [32m      Stdout: Output on stdout stream. Can be `(empty)` or partial on error and for any unwaited background processes.[0m\n      [32m      Stderr: Output on stderr stream. Can be `(empty)` or partial on error and for any unwaited background processes.[0m\n      [32m      Error: Error or `(none)` if no error was reported for the subprocess.[0m\n      [32m      Exit Code: Exit code or `(none)` if terminated by signal.[0m\n      [32m      Signal: Signal number or `(none)` if no signal was received.[0m\n      [32m      Background PIDs: List of background processes started or `(none)`.[0m\n      [32m      Process Group PGID: Process group started or `(none)`[0m\n  - [36mWebFetch (web_fetch)[0m:\n      [32mFetches content from a specified URL and processes it using an AI model[0m\n      [32m- Takes a URL and a prompt as input[0m\n      [32m- Fetches the URL content, converts HTML to markdown[0m\n      [32m- Processes the content with the prompt using a small, fast model[0m\n      [32m- Returns the model's response about the content[0m\n      [32m- Use this tool when you need to retrieve and analyze web content[0m\n      [32m[0m\n      [32mUsage notes:[0m\n      [32m  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".[0m\n      [32m  - The URL must be a fully-formed valid URL[0m\n      [32m  - The prompt should describe what information you want to extract from the page[0m\n      [32m  - This tool is read-only and does not modify any files[0m\n      [32m  - Results may be summarized if the content is very large[0m\n  - [36mWriteFile (write_file)[0m:\n      [32mWrites content to a specified file in the local filesystem.[0m\n      [32m[0m\n      [32m      The user has the ability to modify `content`. If modified, this will be stated in the response.[0m\n\n[0m";

  console.log(parseToolsContent(testcontent));
});
